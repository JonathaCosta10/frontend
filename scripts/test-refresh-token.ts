/**
 * Teste de Refresh Token
 * Este arquivo testa a funcionalidade de refresh token para garantir
 * que a URL esteja sendo constru√≠da corretamente sem duplica√ß√£o.
 */

// Importar as depend√™ncias necess√°rias
import { refreshTokenApi } from '../client/contexts/Rules';
import { localStorageManager } from '../client/lib/localStorage';

// Configura√ß√£o do ambiente
const BACKEND_URL = import.meta.env?.VITE_BACKEND_URL || "/services/api";

// Simula√ß√£o do token para teste
const mockRefreshToken = 'teste-refresh-token';

// Fun√ß√£o para testar o refresh token
async function testRefreshToken() {
  console.log('üß™ Iniciando teste de refresh token...');
  console.log('URL Base:', BACKEND_URL);
  
  try {
    // Obter o refresh token do localStorage
    const storedRefreshToken = localStorageManager.getRefreshToken() || mockRefreshToken;
    
    // Tentar fazer o refresh do token
    console.log('Enviando requisi√ß√£o de refresh com token:', storedRefreshToken.substring(0, 10) + '...');
    
    // A fun√ß√£o refreshTokenApi deve ser chamada corretamente sem duplica√ß√£o de URL
    const result = await refreshTokenApi(storedRefreshToken);
    
    // Verificar o resultado
    if (result) {
      console.log('‚úÖ Teste de refresh token bem-sucedido!');
      console.log('Resultado:', result);
    } else {
      console.error('‚ùå Teste de refresh token falhou - sem dados retornados');
    }
  } catch (error) {
    console.error('‚ùå Erro durante teste de refresh token:', error);
  }
}

// Exportar a fun√ß√£o de teste
export { testRefreshToken };

// Se este arquivo for executado diretamente, rodar o teste
if (typeof window !== 'undefined') {
  testRefreshToken();
}
