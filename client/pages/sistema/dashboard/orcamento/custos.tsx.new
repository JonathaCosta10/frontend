import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Plus,
  TrendingDown,
  AlertCircle,
  Home,
  Car,
  DollarSign,
  Waves,
  GraduationCap,
  Coffee,
  Trash2,
  Target,
  Bell,
} from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { useTranslation } from "@/contexts/TranslationContext";
import { budgetApi } from "@/services/api/budget";
import { useToast } from "@/hooks/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

// ========================= INTERFACES =========================
interface Custo {
  id: number;
  descricao: string;
  valor: number;
  categoria: string;
  mes: number;
  ano: number;
  flag: boolean;
}

interface TotalPorCategoria {
  categoria: string;
  total: number;
  percentual: number;
}

interface ResumoGastos {
  total_gastos: number;
  total_com_replicacao: number;
  total_sem_replicacao: number;
  periodo: {
    mes: string;
    ano: string;
  };
}

interface FormData {
  descricao: string;
  valor_mensal: string;
}

interface ApiResponse {
  maiores_gastos: Custo[];
  totais_por_categoria: TotalPorCategoria[];
  resumo: ResumoGastos;
}

// ========================= CONSTANTES =========================
// Cores para o gráfico de pizza - tons diversificados para custos
const COLORS = [
  "#f97316", // orange-500
  "#0891b2", // cyan-600
  "#7c3aed", // violet-600
  "#16a34a", // green-600
  "#dc2626", // red-600
  "#06b6d4", // cyan-500
  "#8b5cf6", // violet-500
  "#6366f1", // indigo-500
  "#ec4899", // pink-500
];

// ========================= COMPONENTE PRINCIPAL =========================
export default function Custos() {
  const { isAuthenticated } = useAuth();
  const { t, formatCurrency } = useTranslation();
  const { toast } = useToast();

  // ========================= ESTADOS =========================
  const [custos, setCustos] = useState<Custo[]>([]);
  const [totaisPorCategoria, setTotaisPorCategoria] = useState<TotalPorCategoria[]>([]);
  const [resumoGastos, setResumoGastos] = useState<ResumoGastos | null>(null);
  const [loading, setLoading] = useState(false);
  const [currentCategoria, setCurrentCategoria] = useState("Custo Fixo");
  const [formVisible, setFormVisible] = useState(false);
  const formRef = React.useRef<HTMLDivElement>(null);
  const [formData, setFormData] = useState<FormData>({
    descricao: "",
    valor_mensal: "",
  });
  
  // Hook para detectar cliques fora do formulário
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (formRef.current && !formRef.current.contains(event.target as Node)) {
        // Se o usuário clicou fora do formulário e havia dados preenchidos, mostrar confirmação
        if (formData.descricao || formData.valor_mensal) {
          const confirmClose = window.confirm("Deseja descartar os dados do formulário?");
          if (confirmClose) {
            setFormData({
              descricao: "",
              valor_mensal: "",
            });
          }
        } else {
          // Se o formulário está vazio, apenas esconde
          setFormVisible(false);
        }
      }
    }
    
    // Adiciona o listener quando o componente monta
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      // Remove o listener quando o componente desmonta
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [formData]);

  // ========================= CONFIGURAÇÕES =========================
  // Obter mês e ano do localStorage ou usar o atual
  const mes = localStorage.getItem("mes") || String(new Date().getMonth() + 1).padStart(2, "0");
  const ano = localStorage.getItem("ano") || String(new Date().getFullYear());

  // Configuração das categorias
  const categorias = [
    { key: "Custo Fixo", icon: Home, label: "Custo Fixo" },
    { key: "Custo Variável", icon: Waves, label: "Custo Variável" },
    { key: "Transporte", icon: Car, label: "Transporte" },
    { key: "Educação", icon: GraduationCap, label: "Educação" },
    { key: "Lazer", icon: Coffee, label: "Lazer" },
  ];

  // ========================= FUNÇÕES AUXILIARES =========================
  // Função para preparar dados do gráfico
  const prepararDadosGrafico = () => {
    if (!totaisPorCategoria || totaisPorCategoria.length === 0) {
      return [];
    }

    return totaisPorCategoria.map((item, index) => ({
      name: item.categoria,
      value: item.total,
      percentage: item.percentual.toFixed(2),
      color: COLORS[index % COLORS.length],
    }));
  };

  // Função para obter o ícone da categoria
  const getCategoriaIcon = (categoria: string) => {
    switch (categoria) {
      case "Custo Fixo":
        return <Home className="h-4 w-4" />;
      case "Custo Variável":
        return <Waves className="h-4 w-4" />;
      case "Transporte":
        return <Car className="h-4 w-4" />;
      case "Educação":
        return <GraduationCap className="h-4 w-4" />;
      case "Lazer":
        return <Coffee className="h-4 w-4" />;
      default:
        return <DollarSign className="h-4 w-4" />;
    }
  };

  // ========================= EFEITOS =========================
  useEffect(() => {
    if (isAuthenticated) {
      atualizarCustos();
    }
  }, [currentCategoria, mes, ano, isAuthenticated]);

  // ========================= FUNÇÕES DA API =========================
  // Função para atualizar os custos via API
  const atualizarCustos = async () => {
    setLoading(true);

    try {
      const response = await budgetApi.getMaioresGastos(
        currentCategoria,
        mes,
        ano,
      );
      setCustos(response.maiores_gastos || []);
      setTotaisPorCategoria(response.totais_por_categoria || []);
      setResumoGastos(response.resumo || null);
    } catch (error) {
      console.error("Erro ao obter os maiores custos:", error);
      toast({
        title: "Erro",
        description: "Não foi possível carregar os dados de custos.",
        variant: "destructive",
      });
      setCustos([]);
      setTotaisPorCategoria([]);
      setResumoGastos(null);
    } finally {
      setLoading(false);
    }
  };

  // Função para cadastrar um custo
  const cadastrarCusto = async () => {
    try {
      // Converter valor_mensal para número
      const valorMensal = parseFloat(formData.valor_mensal.replace(",", "."));
      
      if (isNaN(valorMensal)) {
        toast({
          title: "Erro",
          description: "Por favor, informe um valor válido.",
          variant: "destructive",
        });
        return;
      }

      // Dados para cadastro
      const dadosCadastro = {
        descricao: formData.descricao,
        valor: valorMensal,
        categoria: currentCategoria,
        mes: mes,
        ano: ano
      };
      
      await budgetApi.cadastrarGasto(dadosCadastro);

      toast({
        title: "Sucesso",
        description: "Custo cadastrado com sucesso!",
      });

      // Limpar formulário e fechar
      setFormData({
        descricao: "",
        valor_mensal: "",
      });
      setFormVisible(false);

      // Atualizar lista de custos
      atualizarCustos();
    } catch (error) {
      console.error("Erro ao cadastrar custo:", error);
      toast({
        title: "Erro",
        description: "Não foi possível cadastrar o custo. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  // Função para excluir um custo
  const excluirCusto = async (id: number) => {
    if (!window.confirm("Tem certeza que deseja excluir este custo?")) {
      return;
    }

    try {
      await budgetApi.excluirGasto(id);
      
      toast({
        title: "Sucesso",
        description: "Custo excluído com sucesso!",
      });
      
      // Atualizar lista de custos
      atualizarCustos();
    } catch (error) {
      console.error("Erro ao excluir custo:", error);
      toast({
        title: "Erro",
        description: "Não foi possível excluir o custo. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  // Função para lidar com mudança de categoria
  const handleCategoriaChange = (categoria: string) => {
    setCurrentCategoria(categoria);
  };

  // Função para lidar com alterações nos campos do formulário
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  // Função para lidar com envio do formulário
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    cadastrarCusto();
  };

  // ========================= RENDERIZAÇÃO =========================
  return (
    <div className="flex flex-col space-y-6 p-6">
      <Toaster />
      
      {/* Cabeçalho da página */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-semibold">Custos</h2>
        <Button 
          variant="outline" 
          onClick={() => setFormVisible(!formVisible)}
        >
          <Plus className="h-4 w-4 mr-2" />
          {formVisible ? "Cancelar" : "Novo Custo"}
        </Button>
      </div>
      
      {/* Cards de resumo */}
      {resumoGastos && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium text-gray-500">Total em Custos</p>
                  <h3 className="text-2xl font-bold">{formatCurrency(resumoGastos.total_gastos)}</h3>
                </div>
                <DollarSign className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium text-gray-500">Quantidade de Registros</p>
                  <h3 className="text-2xl font-bold">{custos.length}</h3>
                </div>
                <Target className="h-8 w-8 text-green-500" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium text-gray-500">Maior Categoria</p>
                  <h3 className="text-2xl font-bold">
                    {totaisPorCategoria.length > 0 
                      ? totaisPorCategoria.sort((a, b) => b.total - a.total)[0].categoria 
                      : "N/A"}
                  </h3>
                </div>
                <Bell className="h-8 w-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {/* Formulário de cadastro */}
        <Card className={`lg:col-span-2 ${formVisible ? 'opacity-100' : 'opacity-0 hidden lg:block'}`} ref={formRef}>
          <CardContent className="p-4">
            <h3 className="text-lg font-semibold mb-4">Novo Custo</h3>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-1">
                <Label htmlFor="descricao">Descrição</Label>
                <Input 
                  id="descricao"
                  name="descricao"
                  value={formData.descricao}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div className="space-y-1">
                <Label htmlFor="valor_mensal">Valor</Label>
                <Input 
                  id="valor_mensal"
                  name="valor_mensal"
                  value={formData.valor_mensal}
                  onChange={handleInputChange}
                  placeholder="0,00"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label>Categoria</Label>
                <div className="flex flex-wrap gap-2">
                  {categorias.map((categoria) => (
                    <Badge
                      key={categoria.key}
                      variant={currentCategoria === categoria.key ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => handleCategoriaChange(categoria.key)}
                    >
                      <categoria.icon className="h-4 w-4 mr-1" />
                      <span>{categoria.label}</span>
                    </Badge>
                  ))}
                </div>
              </div>
              
              <Button type="submit" className="w-full">
                Adicionar
              </Button>
            </form>
          </CardContent>
        </Card>
        
        {/* Gráfico */}
        <Card className="lg:col-span-3">
          <CardContent className="p-4">
            <h3 className="text-lg font-semibold mb-4">Distribuição por Categoria</h3>
            {loading ? (
              <div className="flex flex-col items-center justify-center h-[300px] text-gray-500">
                <span className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></span>
                <p className="mt-2">Carregando dados...</p>
              </div>
            ) : totaisPorCategoria.length > 0 ? (
              <div className="w-full h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={prepararDadosGrafico()}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      nameKey="name"
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    >
                      {prepararDadosGrafico().map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-[300px] text-gray-500">
                <AlertCircle className="h-12 w-12 mb-2" />
                <p>Nenhum dado disponível</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
      
      {/* Tabela de custos */}
      <Card>
        <CardContent className="p-4">
          <h3 className="text-lg font-semibold mb-4">Lista de Custos</h3>
          {loading ? (
            <div className="flex flex-col items-center justify-center p-8 text-gray-500">
              <span className="animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent"></span>
              <p className="mt-2">Carregando dados...</p>
            </div>
          ) : custos.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Descrição</TableHead>
                  <TableHead>Valor</TableHead>
                  <TableHead>Categoria</TableHead>
                  <TableHead className="w-[100px]">Ações</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {custos.map((custo) => (
                  <TableRow key={custo.id}>
                    <TableCell>{custo.descricao}</TableCell>
                    <TableCell>{formatCurrency(custo.valor)}</TableCell>
                    <TableCell>
                      <Badge variant="outline">
                        {getCategoriaIcon(custo.categoria)}
                        <span className="ml-1">{custo.categoria}</span>
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Button variant="ghost" size="icon" onClick={() => excluirCusto(custo.id)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <div className="flex flex-col items-center justify-center p-8 text-gray-500">
              <TrendingDown className="h-12 w-12 mb-2" />
              <p>Nenhum custo cadastrado</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
