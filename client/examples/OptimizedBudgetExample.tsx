/**
 * Exemplo de como usar o sistema otimizado de cache em uma p√°gina de or√ßamento
 * 
 * ANTES (m√∫ltiplas chamadas de API):
 * - useEffect para carregar dados quando m√™s muda
 * - useEffect para carregar dados quando ano muda  
 * - useEffect para carregar dados quando componente monta
 * - Chamadas duplicadas quando usu√°rio navega rapidamente
 * 
 * DEPOIS (sistema otimizado com cache):
 * - Uma √∫nica fonte de verdade para dados
 * - Cache inteligente com tempo de expira√ß√£o
 * - Navega√ß√£o instant√¢nea entre meses do mesmo ano
 * - Refresh otimizado apenas quando necess√°rio
 */

import React from 'react';
import { useBudgetData } from '../hooks/useBudgetData';
import { useTutorialManager } from '../hooks/useTutorialManager';
import BudgetLayout from '../components/BudgetLayout';

// Exemplo de p√°gina de or√ßamento otimizada
export default function OptimizedBudgetPage() {
  // Hook otimizado que gerencia estado e cache automaticamente
  const {
    mes,
    ano,
    data,
    currentMonthData,
    isLoading,
    hasDataForSelectedMonth,
    isCurrentMonthYear,
    mesesDisponiveis,
    histData,
    handleMesChange,
    handleAnoChange,
    refreshData
  } = useBudgetData();

  // Hook para gerenciar tutoriais (agora tamb√©m usa cache)
  const { shouldShowReplicateButton } = useTutorialManager();

  // Exemplo de como lidar com replica√ß√£o de dados
  const handleReplicationComplete = async () => {
    console.log('üîÑ Replica√ß√£o conclu√≠da, atualizando dados...');
    await refreshData(); // For√ßa refresh do cache
    console.log('‚úÖ Dados atualizados ap√≥s replica√ß√£o');
  };

  return (
    <BudgetLayout
      mes={mes}
      ano={ano}
      onMesChange={handleMesChange}
      onAnoChange={handleAnoChange}
    >
      <div className="space-y-6">
        {/* Indicadores de estado */}
        <div className="bg-blue-50 p-4 rounded-lg">
          <h3 className="font-semibold text-blue-900">Estado do Cache:</h3>
          <div className="grid grid-cols-2 gap-4 mt-2 text-sm">
            <div>
              <span className="font-medium">Carregando:</span> 
              <span className={isLoading ? "text-orange-600" : "text-green-600"}>
                {isLoading ? " Sim" : " N√£o"}
              </span>
            </div>
            <div>
              <span className="font-medium">Tem dados:</span>
              <span className={hasDataForSelectedMonth ? "text-green-600" : "text-gray-600"}>
                {hasDataForSelectedMonth ? " Sim" : " N√£o"}
              </span>
            </div>
            <div>
              <span className="font-medium">M√™s atual:</span>
              <span className={isCurrentMonthYear ? "text-blue-600" : "text-gray-600"}>
                {isCurrentMonthYear ? " Sim" : " N√£o"}
              </span>
            </div>
            <div>
              <span className="font-medium">Pode replicar:</span>
              <span className={shouldShowReplicateButton(mes, ano) ? "text-green-600" : "text-gray-600"}>
                {shouldShowReplicateButton(mes, ano) ? " Sim" : " N√£o"}
              </span>
            </div>
          </div>
        </div>

        {/* Conte√∫do da p√°gina */}
        {isLoading ? (
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="ml-2">Carregando dados...</span>
          </div>
        ) : hasDataForSelectedMonth ? (
          <div className="space-y-4">
            <h2 className="text-xl font-semibold">
              Dados de {mes}/{ano}
            </h2>
            {/* Renderizar dados do m√™s */}
            <pre className="bg-gray-100 p-4 rounded overflow-auto text-sm">
              {JSON.stringify(currentMonthData, null, 2)}
            </pre>
          </div>
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-600">
              Nenhum dado encontrado para {mes}/{ano}
            </p>
            {shouldShowReplicateButton(mes, ano) && (
              <button
                onClick={handleReplicationComplete}
                className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Replicar dados do √∫ltimo m√™s
              </button>
            )}
          </div>
        )}

        {/* Debug: mostrar todos os meses dispon√≠veis */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="font-semibold text-gray-900">Meses Dispon√≠veis:</h3>
          <div className="flex flex-wrap gap-2 mt-2">
            {mesesDisponiveis.map(m => (
              <span
                key={m}
                className={`px-2 py-1 rounded text-sm ${
                  m === mes 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-white border border-gray-300'
                }`}
              >
                {m}
              </span>
            ))}
          </div>
        </div>
      </div>
    </BudgetLayout>
  );
}

/**
 * BENEF√çCIOS DA IMPLEMENTA√á√ÉO:
 * 
 * 1. ‚ö° PERFORMANCE
 *    - Cache inteligente evita chamadas desnecess√°rias
 *    - Navega√ß√£o entre meses do mesmo ano √© instant√¢nea
 *    - Dados s√£o compartilhados entre componentes
 * 
 * 2. üîÑ ATUALIZA√á√ïES INTELIGENTES
 *    - Cache invalidado automaticamente ap√≥s opera√ß√µes
 *    - Refresh for√ßado apenas quando necess√°rio
 *    - Estados de loading centralizados
 * 
 * 3. üß† EXPERI√äNCIA DO USU√ÅRIO
 *    - Sem recarregamentos desnecess√°rios da p√°gina
 *    - Loading states apropriados
 *    - Navega√ß√£o fluida entre datas
 * 
 * 4. üõ†Ô∏è MANUTENIBILIDADE
 *    - L√≥gica de cache centralizada
 *    - Estado compartilhado entre componentes
 *    - F√°cil debug e monitoramento
 * 
 * 5. üì± RESPONSIVIDADE
 *    - Menos requisi√ß√µes = menos tempo de resposta
 *    - Melhor performance em dispositivos m√≥veis
 *    - Economiza dados m√≥veis dos usu√°rios
 */
